services:
  # Database Services
  postgres:
    image: postgres:16-alpine
    container_name: pleiotropy-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-pleiotropy_secure_password}
      POSTGRES_DB: pleiotropy_trials
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./trial_database/database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pleiotropy-network

  # Redis for caching and agent coordination
  redis:
    image: redis:7-alpine
    container_name: pleiotropy-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-pleiotropy_redis_password}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-pleiotropy_redis_password}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - pleiotropy-network

  # Core API Service
  api:
    build:
      context: ./trial_database/api
      dockerfile: Dockerfile
    container_name: pleiotropy-api
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:${DB_PASSWORD:-pleiotropy_secure_password}@postgres:5432/pleiotropy_trials
      REDIS_URL: redis://:${REDIS_PASSWORD:-pleiotropy_redis_password}@redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here-change-in-production}
      CORS_ORIGINS: '["http://localhost:3000", "http://localhost:5173", "http://ui:3000"]'
      ENVIRONMENT: production
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - pleiotropy-network

  # React UI
  ui:
    build:
      context: ./trial_database/ui
      dockerfile: Dockerfile
    container_name: pleiotropy-ui
    environment:
      VITE_API_URL: http://localhost:8000
      VITE_WS_URL: ws://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - pleiotropy-network

  # Swarm Coordinator
  coordinator:
    build:
      context: .
      dockerfile: trial_database/swarm/Dockerfile.coordinator
    container_name: pleiotropy-coordinator
    depends_on:
      redis:
        condition: service_healthy
      api:
        condition: service_healthy
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-pleiotropy_redis_password}
      - API_URL=http://api:8000
      - PYTHONUNBUFFERED=1
    ports:
      - "8080:8080"
    volumes:
      - ./trial_database/swarm:/app
      - ./reports:/app/reports
      - swarm_data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - pleiotropy-network

  # Rust Analyzer Agent
  rust_analyzer:
    build:
      context: .
      dockerfile: trial_database/swarm/Dockerfile.rust_agent
    depends_on:
      - coordinator
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-pleiotropy_redis_password}
      - RUST_LOG=info
      - PYTHONUNBUFFERED=1
      - COORDINATOR_URL=http://coordinator:8080
    volumes:
      - ./rust_impl:/rust_impl
      - ./genome_research:/genome_research
      - ./trial_database/swarm:/app
      - rust_data:/app/data
    restart: unless-stopped
    networks:
      - pleiotropy-network
    scale: 2

  # Python Visualizer Agent
  python_visualizer:
    build:
      context: .
      dockerfile: trial_database/swarm/Dockerfile.python_agent
    depends_on:
      - coordinator
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-pleiotropy_redis_password}
      - PYTHONUNBUFFERED=1
      - COORDINATOR_URL=http://coordinator:8080
    volumes:
      - ./python_analysis:/python_analysis
      - ./trial_database/swarm:/app
      - ./reports:/app/reports
      - python_data:/app/data
    restart: unless-stopped
    networks:
      - pleiotropy-network
    scale: 2

  # Monitoring: Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: pleiotropy-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - pleiotropy-network

  # Monitoring: Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: pleiotropy-grafana
    depends_on:
      - prometheus
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-pleiotropy_grafana_password}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=localhost
      - GF_SMTP_ENABLED=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - pleiotropy-network

  # Note: Log aggregation and reverse proxy removed for initial deployment
  # Add them back after basic stack is working

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  swarm_data:
    driver: local
  rust_data:
    driver: local
  python_data:
    driver: local

networks:
  pleiotropy-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16