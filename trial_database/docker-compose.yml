version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: pleiotropy_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_DB: pleiotropy_trials
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: pleiotropy_api
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:${DB_PASSWORD:-password}@postgres:5432/pleiotropy_trials
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here-change-in-production}
      CORS_ORIGINS: '["http://localhost:3000", "http://localhost:5173", "http://ui:5173"]'
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./api/app:/app/app  # For development hot-reload
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # React UI (if needed)
  ui:
    build:
      context: ./ui
      dockerfile: Dockerfile
    container_name: pleiotropy_ui
    environment:
      VITE_API_URL: http://localhost:8000
      VITE_WS_URL: ws://localhost:8000
    ports:
      - "5173:5173"
    depends_on:
      - api
    volumes:
      - ./ui:/app  # For development hot-reload
      - /app/node_modules  # Prevent overwriting node_modules
    command: npm run dev -- --host 0.0.0.0

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: pleiotropy_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # Nginx reverse proxy (production)
  nginx:
    image: nginx:alpine
    container_name: pleiotropy_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api
      - ui
    profiles:
      - production

volumes:
  postgres_data:
  redis_data: