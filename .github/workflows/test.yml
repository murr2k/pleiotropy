name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  PYTHONUNBUFFERED: 1

jobs:
  rust-tests:
    name: Rust Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        override: true
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: rust_impl/target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: |
        cd rust_impl
        cargo fmt -- --check
    
    - name: Run clippy
      run: |
        cd rust_impl
        cargo clippy -- -D warnings
    
    - name: Run tests
      run: |
        cd rust_impl
        cargo test --verbose
    
    - name: Run tests with all features
      run: |
        cd rust_impl
        cargo test --all-features --verbose
    
    - name: Generate test coverage
      run: |
        cd rust_impl
        cargo install cargo-tarpaulin
        cargo tarpaulin --out Xml --output-dir coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./rust_impl/coverage/cobertura.xml
        flags: rust
        name: rust-coverage

  python-tests:
    name: Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r python_analysis/requirements.txt
        pip install -r tests/requirements-test.txt
    
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 python_analysis --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 python_analysis --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type check with mypy
      run: |
        pip install mypy
        mypy python_analysis --ignore-missing-imports
    
    - name: Run tests with pytest
      run: |
        pytest tests/unit -v --cov=python_analysis --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: python
        name: python-coverage

  ui-tests:
    name: UI Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: trial_database/ui/package-lock.json
    
    - name: Install dependencies
      run: |
        cd trial_database/ui
        npm ci
    
    - name: Run linter
      run: |
        cd trial_database/ui
        npm run lint
    
    - name: Run type check
      run: |
        cd trial_database/ui
        npm run type-check || true  # Allow failure for now
    
    - name: Run tests
      run: |
        cd trial_database/ui
        npm test -- --coverage --watchAll=false
    
    - name: Build
      run: |
        cd trial_database/ui
        npm run build
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        directory: ./trial_database/ui/coverage
        flags: ui
        name: ui-coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [rust-tests, python-tests]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        cd rust_impl && cargo build --release
        python -m pip install --upgrade pip
        pip install -r python_analysis/requirements.txt
        pip install -r tests/requirements-test.txt
    
    - name: Generate test data
      run: |
        cd tests/fixtures
        python test_data_generator.py
    
    - name: Run integration tests
      run: |
        pytest tests/integration -v
    
    - name: Run E. coli workflow
      run: |
        chmod +x examples/ecoli_workflow.sh
        ./examples/ecoli_workflow.sh

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [rust-tests, python-tests]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        cd rust_impl && cargo build --release
        python -m pip install --upgrade pip
        pip install -r python_analysis/requirements.txt
        pip install -r tests/requirements-test.txt
    
    - name: Run performance tests
      run: |
        pytest tests/performance -v --benchmark-only
    
    - name: Run Rust benchmarks
      run: |
        cd rust_impl
        cargo bench
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: |
          rust_impl/target/criterion/
          tests/performance/results/

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Rust security audit
      run: |
        cargo install cargo-audit
        cd rust_impl
        cargo audit
    
    - name: Run Python security check
      run: |
        pip install safety bandit
        safety check -r python_analysis/requirements.txt
        bandit -r python_analysis/
    
    - name: Run npm audit
      run: |
        cd trial_database/ui
        npm audit

  all-tests-passed:
    name: All Tests Passed
    runs-on: ubuntu-latest
    needs: [rust-tests, python-tests, ui-tests, integration-tests, performance-tests, security-tests]
    
    steps:
    - name: Success
      run: echo "All tests passed successfully!"